generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @default(autoincrement())
  uid         String        @id @unique @default(cuid())
  name        String
  email       String
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyUser CompanyUser[]
}

model Company {
  id           Int              @default(autoincrement())
  uid          String           @id @unique @default(cuid())
  name         String
  cnpj         String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  addresses    CompanyAddress[]
  emails       CompanyEmail[]
  phones       CompanyPhone[]
  companyUsers CompanyUser[]

  products  Product[]
  customers Customer[]
}

model Customer {
  id           Int               @default(autoincrement())
  uid          String            @id @unique @default(cuid())
  companyUid   String
  name         String
  surname      String?
  observations String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  emails       CustomerEmail[]
  phones       CustomerPhone[]
  addresses    CustomerAddress[]

  Company Company @relation(fields: [companyUid], references: [uid])
}

model Product {
  id          Int      @default(autoincrement())
  uid         String   @id @unique @default(cuid())
  companyUid  String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variant Variant[]

  Company Company @relation(fields: [companyUid], references: [uid])
}

model Variant {
  id          Int      @default(autoincrement())
  uid         String   @id @unique @default(cuid())
  productUid  String
  quantity    Float
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images     String[]
  properties Json[]

  Products Product @relation(fields: [productUid], references: [uid], onDelete: Cascade)
}

model CompanyUser {
  userUid    String
  companyUid String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  companies  Company  @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
  users      User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)

  @@id([userUid, companyUid])
}

model CompanyAddress {
  id           Int      @default(autoincrement())
  uid          String   @id @unique @default(cuid())
  companyUid   String
  street       String
  number       String
  neighborhood String
  complement   String?
  city         String
  state        String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
}

model CompanyPhone {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
}

model CompanyEmail {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
}

model CustomerEmail {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
}

model CustomerPhone {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [companyUid], references: [uid], onDelete: Cascade)
}

model CustomerAddress {
  id           Int      @default(autoincrement())
  uid          String   @id @unique @default(cuid())
  customerUid  String
  street       String
  number       String
  neighborhood String
  complement   String?
  city         String
  state        String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerUid], references: [uid], onDelete: Cascade)
}
