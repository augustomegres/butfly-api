generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @default(autoincrement())
  uid         String        @id @unique @default(cuid())
  name        String
  email       String
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyUser CompanyUser[]
}

model Company {
  id              Int               @default(autoincrement())
  uid             String            @id @unique @default(cuid())
  name            String
  cnpj            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  addresses       CompanyAddress[]
  emails          CompanyEmail[]
  phones          CompanyPhone[]
  companyUsers    CompanyUser[]
  companyCustomer CompanyCustomer[]
}

model Customer {
  id              Int               @default(autoincrement())
  uid             String            @id @unique @default(cuid())
  name            String
  surname         String?
  observations    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  emails          CustomerEmail[]
  phones          CustomerPhone[]
  addresses       CustomerAddress[]
  companyCustomer CompanyCustomer[]
}

model Product {
  id                  Int      @default(autoincrement())
  uid                 String   @id @unique @default(cuid())
  name                String
  properties          String?
  availableProperties String[]
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  variant Variant[]
}

model Variant {
  id          Int      @default(autoincrement())
  uid         String   @id @unique @default(cuid())
  productUid  String
  quantity    Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images          VariantImage[]
  variantProperty VariantProperty[]

  Products Product @relation(fields: [productUid], references: [uid])
}

model VariantProperty {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  variantUid String
  title      String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  variant Variant @relation(fields: [variantUid], references: [uid])
}

model VariantImage {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  variantUid String?
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  variants Variant? @relation(fields: [variantUid], references: [uid])
}

model CompanyUser {
  userUid    String
  companyUid String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  companies  Company  @relation(fields: [companyUid], references: [uid])
  users      User     @relation(fields: [userUid], references: [uid])

  @@id([userUid, companyUid])
}

model CompanyAddress {
  id           Int      @default(autoincrement())
  uid          String   @id @unique @default(cuid())
  companyUid   String
  street       String
  number       String
  neighborhood String
  complement   String?
  city         String
  state        String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyUid], references: [uid])
}

model CompanyPhone {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyUid], references: [uid])
}

model CompanyEmail {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyUid], references: [uid])
}

model CompanyCustomer {
  companyUid  String
  customerUid String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companies   Company  @relation(fields: [companyUid], references: [uid])
  customers   Customer @relation(fields: [customerUid], references: [uid])

  @@id([companyUid, customerUid])
}

model CustomerEmail {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [companyUid], references: [uid])
}

model CustomerPhone {
  id         Int      @default(autoincrement())
  uid        String   @id @unique @default(cuid())
  companyUid String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [companyUid], references: [uid])
}

model CustomerAddress {
  id           Int      @default(autoincrement())
  uid          String   @id @unique @default(cuid())
  customerUid  String
  street       String
  number       String
  neighborhood String
  complement   String?
  city         String
  state        String
  zipCode      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerUid], references: [uid])
}
